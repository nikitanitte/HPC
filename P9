#include "mpi.h"
#include <stdio.h>
int main(int argc, char *argv[]) {
int numtasks, rank, count, tag = 1;
char inmsg, outmsg = 'x';
int buf[2], prev, next;
MPI_Request reqs[4];
MPI_Status stat, stats[4];
MPI_Init(&argc, &argv);
MPI_Comm_size(MPI_COMM_WORLD, &numtasks);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
if (numtasks == 2) { 
if (rank == 0) {
MPI_Send(&outmsg, 1, MPI_CHAR, 1, tag, MPI_COMM_WORLD);
MPI_Recv(&inmsg, 1, MPI_CHAR, 1, tag, MPI_COMM_WORLD, 
&stat);
} else {
MPI_Recv(&inmsg, 1, MPI_CHAR, 0, tag, MPI_COMM_WORLD, 
&stat);
MPI_Send(&outmsg, 1, MPI_CHAR, 0, tag, MPI_COMM_WORLD);
}
MPI_Get_count(&stat, MPI_CHAR, &count);
printf("Blocking: Task %d received %d char(s) from task %d with tag 
%d\n", rank, count, stat.MPI_SOURCE, stat.MPI_TAG);
} else { 
prev = (rank == 0) ? numtasks - 1 : rank - 1;
next = (rank == numtasks - 1) ? 0 : rank + 1;
// Non-blocking receive and send
MPI_Irecv(&buf[0], 1, MPI_INT, prev, tag, MPI_COMM_WORLD, 
&reqs[0]);
MPI_Irecv(&buf[1], 1, MPI_INT, next, tag, MPI_COMM_WORLD, 
&reqs[1]);
MPI_Isend(&rank, 1, MPI_INT, prev, tag, MPI_COMM_WORLD, 
&reqs[2]);
MPI_Isend(&rank, 1, MPI_INT, next, tag, MPI_COMM_WORLD, 
&reqs[3]);
MPI_Waitall(4, reqs, stats);
printf("Non-blocking: Task %d communicated with tasks %d & %d\n", 
rank, prev, next);
}
MPI_Finalize();
return 0;
}
