#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <omp.h>
void matrix_multiply(int *A, int *B, int *C, int n, int parallel) {
#pragma omp parallel for if(parallel)
for (int i = 0; i < n; i++)
for (int j = 0; j < n; j++) {
C[i * n + j] = 0;
for (int k = 0; k < n; k++)
C[i * n + j] += A[i * n + k] * B[k * n + j];
}
}
int main() {
int n;
printf("Enter the dimension of square matrices: ");
scanf("%d", &n);
int *A = malloc(n * n * sizeof(int)), *B = malloc(n * n * sizeof(int)), *C = 
malloc(n * n * sizeof(int));
srand(time(NULL));
for (int i = 0; i < n * n; i++) A[i] = rand() % 10, B[i] = rand() % 10;
clock_t start = clock();
matrix_multiply(A, B, C, n, 0);
double time_sequential = (double)(clock() - start) / CLOCKS_PER_SEC;
start = clock();
matrix_multiply(A, B, C, n, 1);
double time_parallel = (double)(clock() - start) / CLOCKS_PER_SEC;
printf("Time taken by parallel algorithm: %lf\nTime taken by Sequential 
algorithm: %lf\n", time_parallel, time_sequential);
free(A), free(B), free(C);
return 0;
}
